//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\eugene.krapivin@sap.com\source\repos\TranformerDSLParser\TranformerDSLParser\TransformerDSL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TransformerDSL.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TransformerDSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LPAREN=9, 
		RPAREN=10, FUNCTION_START=11, ARG_SEPERATOR=12, IDENTIFIER=13, STRING=14, 
		NUMBER=15, WS=16;
	public const int
		RULE_func = 0, RULE_json = 1, RULE_obj = 2, RULE_pair = 3, RULE_arr = 4, 
		RULE_value = 5;
	public static readonly string[] ruleNames = {
		"func", "json", "obj", "pair", "arr", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "':'", "'['", "']'", "'true'", "'false'", "'null'", 
		"'('", "')'", "'#'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LPAREN", "RPAREN", 
		"FUNCTION_START", "ARG_SEPERATOR", "IDENTIFIER", "STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransformerDSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TransformerDSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TransformerDSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TransformerDSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_START() { return GetToken(TransformerDSLParser.FUNCTION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TransformerDSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TransformerDSLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TransformerDSLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG_SEPERATOR() { return GetTokens(TransformerDSLParser.ARG_SEPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_SEPERATOR(int i) {
			return GetToken(TransformerDSLParser.ARG_SEPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 0, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(FUNCTION_START);
			State = 13;
			Match(IDENTIFIER);
			State = 14;
			Match(LPAREN);
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 15;
				json();
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ARG_SEPERATOR) {
					{
					{
					State = 16;
					Match(ARG_SEPERATOR);
					State = 17;
					func();
					}
					}
					State = 22;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 25;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG_SEPERATOR() { return GetTokens(TransformerDSLParser.ARG_SEPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_SEPERATOR(int i) {
			return GetToken(TransformerDSLParser.ARG_SEPERATOR, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 4, RULE_obj);
		int _la;
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				Match(T__0);
				State = 30;
				pair();
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ARG_SEPERATOR) {
					{
					{
					State = 31;
					Match(ARG_SEPERATOR);
					State = 32;
					pair();
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 38;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(T__0);
				State = 41;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TransformerDSLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(STRING);
			State = 45;
			Match(T__2);
			State = 46;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG_SEPERATOR() { return GetTokens(TransformerDSLParser.ARG_SEPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_SEPERATOR(int i) {
			return GetToken(TransformerDSLParser.ARG_SEPERATOR, i);
		}
		public ArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrContext arr() {
		ArrContext _localctx = new ArrContext(Context, State);
		EnterRule(_localctx, 8, RULE_arr);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(T__3);
				State = 49;
				value();
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ARG_SEPERATOR) {
					{
					{
					State = 50;
					Match(ARG_SEPERATOR);
					State = 51;
					value();
					}
					}
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 57;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				Match(T__3);
				State = 60;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TransformerDSLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TransformerDSLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrContext arr() {
			return GetRuleContext<ArrContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransformerDSLListener typedListener = listener as ITransformerDSLListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransformerDSLVisitor<TResult> typedVisitor = visitor as ITransformerDSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_value);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				Match(NUMBER);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				obj();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				arr();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 69;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'K', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x15', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x18', '\v', '\x2', '\x5', '\x2', 
		'\x1A', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'$', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\'', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x37', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', ':', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '@', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'I', '\n', '\a', '\x3', '\a', '\x2', '\x2', 
		'\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', 'P', 
		'\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', 
		'\x2', '\x2', '\x2', '\n', '?', '\x3', '\x2', '\x2', '\x2', '\f', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\a', '\r', '\x2', '\x2', '\xF', 
		'\x10', '\a', '\xF', '\x2', '\x2', '\x10', '\x19', '\a', '\v', '\x2', 
		'\x2', '\x11', '\x16', '\x5', '\x4', '\x3', '\x2', '\x12', '\x13', '\a', 
		'\xE', '\x2', '\x2', '\x13', '\x15', '\x5', '\x2', '\x2', '\x2', '\x14', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x15', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x19', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\f', '\x2', '\x2', '\x1C', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\f', '\a', 
		'\x2', '\x1E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x3', 
		'\x2', '\x2', ' ', '%', '\x5', '\b', '\x5', '\x2', '!', '\"', '\a', '\xE', 
		'\x2', '\x2', '\"', '$', '\x5', '\b', '\x5', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\a', '\x4', '\x2', '\x2', ')', '-', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\a', '\x3', '\x2', '\x2', '+', '-', '\a', '\x4', '\x2', '\x2', ',', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		'-', '\a', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x10', '\x2', 
		'\x2', '/', '\x30', '\a', '\x5', '\x2', '\x2', '\x30', '\x31', '\x5', 
		'\f', '\a', '\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x6', '\x2', '\x2', '\x33', '\x38', '\x5', '\f', '\a', '\x2', '\x34', 
		'\x35', '\a', '\xE', '\x2', '\x2', '\x35', '\x37', '\x5', '\f', '\a', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\a', 
		'\x2', '\x2', '<', '@', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x6', 
		'\x2', '\x2', '>', '@', '\a', '\a', '\x2', '\x2', '?', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x41', 'I', '\a', '\x10', '\x2', '\x2', '\x42', 
		'I', '\a', '\x11', '\x2', '\x2', '\x43', 'I', '\x5', '\x6', '\x4', '\x2', 
		'\x44', 'I', '\x5', '\n', '\x6', '\x2', '\x45', 'I', '\a', '\b', '\x2', 
		'\x2', '\x46', 'I', '\a', '\t', '\x2', '\x2', 'G', 'I', '\a', '\n', '\x2', 
		'\x2', 'H', '\x41', '\x3', '\x2', '\x2', '\x2', 'H', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x43', '\x3', '\x2', '\x2', '\x2', 'H', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\t', '\x16', '\x19', '%', ',', '\x38', 
		'?', 'H',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TransformerDSL.Parser
